 - Bulk post-check api call:
        This api will take an array of posts (json), and then return an array of results, in the same
        format as the single post-check call.
        This will lead to a lesser number of API calls from SD.
 - Switch to a websocket instead of HTTP API calls?
 - What is `body_summary` in SD's rule implementations?
 - Reduce code size in reasons.cpp, especially for regex-check based rules. Most of them do the same thing   , so we can generalise the regex functions, like in SD, with slight modifications to the Rule class.
 - Whitelisted and Blacklisted users:
        Maintain a separate List for these users. Then, operate them in a similar way as the others.
        Whitelisted users will require some special changes (maybe a few lines) in the Rule::run method.
 - Finish implementing all 112 reasons.
 - More detailed "why" reports - https://github.com/Charcoal-SE/SmokeDetector/pull/2605
 - Merge all "Bad keyword/blah blah in answer" with "blah blah in body"?
 - a `!!/bisect` api endpoint?
 - Network based checks - Google Perspective
 - a logging system (spdlog)
 - Whitelisted links
 - Strip code blocks in Rule::run, if need be.
 - repeating words filter (modify regex to avoid multiple named capture groups, since boost does not
   behave well with them) https://github.com/Charcoal-SE/SmokeDetector/blob/master/findspam.py#L484
 - Finish all reasons (i.e, filters)
 - Check for a boost::regex exception, which indicates an invalid regex. Watch for this while loading all    lists (i.e, blacklists etc.) and also check all the regexes in reasons.cpp for this exception. Might al   so be useful when adding a new element to a list
 - Throttling too many requests
 - Unicode boundaries? `?w` regex extension: https://github.com/Charcoal-SE/SmokeDetector/commit/36f62fce4c08eee9c04f019ed8a38a9cdc1582a1#diff-0763921f6af04c4a434786e1674a91c9R1127
    - Removed `u` from `(?iu)` in multiple places (regex.cpp).
    - Recognize Latin and Cyrillic characters; require unicode support (for "Mostly non-latin").
 - Make all api calls async.
 - Fix regex in "Bad pattern in URL" rule.
 - Handle errors when the data file does not exist (blacklists and keys); maybe raise an exception?.
 - Move all custom errors to a new error handling file.
 - Handle malformed data files (custom exception?).
 - Move utilities.cpp to extensions.cpp
 - Check for memory leaks (use valgrind).
 - Move to sets instead of vectors in Lists.

----------------

Pros of FG:
    - Blacklist mods can be done with a single API call, which will change the list loaded in runtime mem.      This means no messy git pushes, and no need of rapid reload or SD reboot after CI pass.

